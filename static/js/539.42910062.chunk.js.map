{"version":3,"file":"static/js/539.42910062.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/LoginForm/LoginForm.module.css?4ac5","components/LoginForm/LoginForm.jsx","webpack://react-homework-template/./src/pages/LoginPage/LoginPage.module.css?f8e0","pages/LoginPage/LoginPage.jsx","../node_modules/@chakra-ui/button/src/button-context.ts","../node_modules/@chakra-ui/button/src/button-icon.tsx","../node_modules/@chakra-ui/button/src/button-spinner.tsx","../node_modules/@chakra-ui/react-use-merge-refs/src/index.ts","../node_modules/@chakra-ui/button/src/button.tsx","../node_modules/@chakra-ui/button/src/use-button-type.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"LoginForm_form__gPEx5\",\"label\":\"LoginForm_label__F7sLE\",\"input\":\"LoginForm_input__aQRtt\"};","import { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/authOperations';\nimport { Button } from '@chakra-ui/react';\nimport css from './LoginForm.module.css';\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    dispatch(\n      logIn({\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit} autoComplete=\"off\">\n      <label className={css.label}>\n        Email\n        <input className={css.input} type=\"email\" name=\"email\" />\n      </label>\n      <label className={css.label}>\n        Password\n        <input className={css.input} type=\"password\" name=\"password\" />\n      </label>\n      <Button type=\"submit\" colorScheme=\"telegram\" variant=\"ghost\" size=\"md\">\n        Log In\n      </Button>\n    </form>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"LoginPage_wrapper__ewWJj\"};","import { LoginForm } from 'components/LoginForm/LoginForm';\nimport css from './LoginPage.module.css';\n\nexport default function LoginPage() {\n  return (\n    <div className={css.wrapper}>\n      <LoginForm />\n    </div>\n  );\n}\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { ThemingProps } from \"@chakra-ui/system\"\n\nexport interface ButtonGroupContext extends ThemingProps<\"Button\"> {\n  /**\n   * @default false\n   */\n  isDisabled?: boolean\n}\n\nexport const [ButtonGroupProvider, useButtonGroup] =\n  createContext<ButtonGroupContext>({\n    strict: false,\n    name: \"ButtonGroupContext\",\n  })\n","import { chakra, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { cloneElement, isValidElement } from \"react\"\n\nexport function ButtonIcon(props: HTMLChakraProps<\"span\">) {\n  const { children, className, ...rest } = props\n\n  const _children = isValidElement(children)\n    ? cloneElement<any>(children, {\n        \"aria-hidden\": true,\n        focusable: false,\n      })\n    : children\n\n  const _className = cx(\"chakra-button__icon\", className)\n\n  return (\n    <chakra.span\n      display=\"inline-flex\"\n      alignSelf=\"center\"\n      flexShrink={0}\n      {...rest}\n      className={_className}\n    >\n      {_children}\n    </chakra.span>\n  )\n}\n\nButtonIcon.displayName = \"ButtonIcon\"\n","import { Spinner } from \"@chakra-ui/spinner\"\nimport { chakra, HTMLChakraProps, SystemStyleObject } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useMemo } from \"react\"\nimport { ButtonSpinnerOptions } from \"./button-types\"\n\ninterface ButtonSpinnerProps\n  extends HTMLChakraProps<\"div\">,\n    ButtonSpinnerOptions {}\n\nexport function ButtonSpinner(props: ButtonSpinnerProps) {\n  const {\n    label,\n    placement,\n    spacing = \"0.5rem\",\n    children = <Spinner color=\"currentColor\" width=\"1em\" height=\"1em\" />,\n    className,\n    __css,\n    ...rest\n  } = props\n\n  const _className = cx(\"chakra-button__spinner\", className)\n\n  const marginProp = placement === \"start\" ? \"marginEnd\" : \"marginStart\"\n\n  const spinnerStyles: SystemStyleObject = useMemo(\n    () => ({\n      display: \"flex\",\n      alignItems: \"center\",\n      position: label ? \"relative\" : \"absolute\",\n      [marginProp]: label ? spacing : 0,\n      fontSize: \"1em\",\n      lineHeight: \"normal\",\n      ...__css,\n    }),\n    [__css, label, marginProp, spacing],\n  )\n\n  return (\n    <chakra.div className={_className} {...rest} __css={spinnerStyles}>\n      {children}\n    </chakra.div>\n  )\n}\nButtonSpinner.displayName = \"ButtonSpinner\"\n","import { useMemo } from \"react\"\n\nexport type ReactRef<T> = React.RefCallback<T> | React.MutableRefObject<T>\n\nexport function assignRef<T = any>(\n  ref: ReactRef<T> | null | undefined,\n  value: T,\n) {\n  if (ref == null) return\n\n  if (typeof ref === \"function\") {\n    ref(value)\n    return\n  }\n\n  try {\n    ref.current = value\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`)\n  }\n}\n\nexport function mergeRefs<T>(...refs: (ReactRef<T> | null | undefined)[]) {\n  return (node: T | null) => {\n    refs.forEach((ref) => {\n      assignRef(ref, node)\n    })\n  }\n}\n\nexport function useMergeRefs<T>(...refs: (ReactRef<T> | null | undefined)[]) {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useMemo(() => mergeRefs(...refs), refs)\n}\n","import { useMergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\n\nimport { useMemo } from \"react\"\nimport { useButtonGroup } from \"./button-context\"\nimport { ButtonIcon } from \"./button-icon\"\nimport { ButtonSpinner } from \"./button-spinner\"\nimport { ButtonOptions } from \"./button-types\"\nimport { useButtonType } from \"./use-button-type\"\n\nexport interface ButtonProps\n  extends HTMLChakraProps<\"button\">,\n    ButtonOptions,\n    ThemingProps<\"Button\"> {}\n\n/**\n * Button component is used to trigger an action or event, such as submitting a form, opening a Dialog, canceling an action, or performing a delete operation.\n *\n * @see Docs https://chakra-ui.com/docs/components/button\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/button/\n */\nexport const Button = forwardRef<ButtonProps, \"button\">((props, ref) => {\n  const group = useButtonGroup()\n  const styles = useStyleConfig(\"Button\", { ...group, ...props })\n\n  const {\n    isDisabled = group?.isDisabled,\n    isLoading,\n    isActive,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type,\n    spinner,\n    spinnerPlacement = \"start\",\n    className,\n    as,\n    ...rest\n  } = omitThemingProps(props)\n\n  /**\n   * When button is used within ButtonGroup (i.e. flushed with sibling buttons),\n   * it is important to add a `zIndex` on focus.\n   *\n   * So let's read the component styles and then add `zIndex` to it.\n   */\n  const buttonStyles: SystemStyleObject = useMemo(() => {\n    // @ts-ignore\n    const _focus = { ...styles?.[\"_focus\"], zIndex: 1 }\n    return {\n      display: \"inline-flex\",\n      appearance: \"none\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      userSelect: \"none\",\n      position: \"relative\",\n      whiteSpace: \"nowrap\",\n      verticalAlign: \"middle\",\n      outline: \"none\",\n      ...styles,\n      ...(!!group && { _focus }),\n    }\n  }, [styles, group])\n\n  const { ref: _ref, type: defaultType } = useButtonType(as)\n\n  const contentProps = { rightIcon, leftIcon, iconSpacing, children }\n\n  return (\n    <chakra.button\n      ref={useMergeRefs(ref, _ref)}\n      as={as}\n      type={type ?? defaultType}\n      data-active={dataAttr(isActive)}\n      data-loading={dataAttr(isLoading)}\n      __css={buttonStyles}\n      className={cx(\"chakra-button\", className)}\n      {...rest}\n      disabled={isDisabled || isLoading}\n    >\n      {isLoading && spinnerPlacement === \"start\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--start\"\n          label={loadingText}\n          placement=\"start\"\n          spacing={iconSpacing}\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n\n      {isLoading ? (\n        loadingText || (\n          <chakra.span opacity={0}>\n            <ButtonContent {...contentProps} />\n          </chakra.span>\n        )\n      ) : (\n        <ButtonContent {...contentProps} />\n      )}\n\n      {isLoading && spinnerPlacement === \"end\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--end\"\n          label={loadingText}\n          placement=\"end\"\n          spacing={iconSpacing}\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n    </chakra.button>\n  )\n})\n\nButton.displayName = \"Button\"\n\ntype ButtonContentProps = Pick<\n  ButtonProps,\n  \"leftIcon\" | \"rightIcon\" | \"children\" | \"iconSpacing\"\n>\n\nfunction ButtonContent(props: ButtonContentProps) {\n  const { leftIcon, rightIcon, children, iconSpacing } = props\n  return (\n    <>\n      {leftIcon && <ButtonIcon marginEnd={iconSpacing}>{leftIcon}</ButtonIcon>}\n      {children}\n      {rightIcon && (\n        <ButtonIcon marginStart={iconSpacing}>{rightIcon}</ButtonIcon>\n      )}\n    </>\n  )\n}\n","import { useCallback, useState } from \"react\"\n\nexport function useButtonType(value?: React.ElementType) {\n  const [isButton, setIsButton] = useState(!value)\n  const refCallback = useCallback((node: HTMLElement | null) => {\n    if (!node) return\n    setIsButton(node.tagName === \"BUTTON\")\n  }, [])\n  const type = isButton ? \"button\" : undefined\n  return { ref: refCallback, type } as const\n}\n"],"names":["LoginForm","dispatch","useDispatch","className","css","onSubmit","e","preventDefault","form","currentTarget","logIn","email","elements","value","password","autoComplete","type","name","colorScheme","variant","size","LoginPage","createContext","strict","useButtonGroup","props","children","rest","_children","focusable","isValidElement","cloneElement","_className","span","cx","ButtonIcon","chakra","alignSelf","flexShrink","displayName","label","placement","spacing","color","ButtonSpinner","Spinner","width","height","__css","marginProp","spinnerStyles","display","useMemo","alignItems","position","div","assignRef","ref","current","error","Error","mergeRefs","refs","node","forEach","useMergeRefs","styles","dataAttr","isDisabled","isLoading","isActive","Fragment","leftIcon","rightIcon","loadingText","iconSpacing","spinner","spinnerPlacement","as","buttonStyles","_focus","zIndex","appearance","justifyContent","userSelect","whiteSpace","verticalAlign","outline","useButtonType","_ref","defaultType","contentProps","useState","isButton","setIsButton","useCallback","tagName","button","disabled","useStyleConfig","Button","jsx","group","omitThemingProps","opacity","forwardRef","marginStart","marginEnd"],"sourceRoot":""}