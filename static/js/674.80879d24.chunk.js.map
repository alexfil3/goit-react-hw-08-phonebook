{"version":3,"file":"static/js/674.80879d24.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/pages/HomePage/HomePage.module.css?5baa","pages/HomePage/HomePage.jsx","../node_modules/@chakra-ui/button/src/button-context.ts","../node_modules/@chakra-ui/button/src/button-icon.tsx","../node_modules/@chakra-ui/button/src/button-spinner.tsx","../node_modules/@chakra-ui/react-use-merge-refs/src/index.ts","../node_modules/@chakra-ui/button/src/button.tsx","../node_modules/@chakra-ui/button/src/use-button-type.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"HomePage_wrapper__fbr7T\",\"text\":\"HomePage_text__2XixT\"};","import { NavLink } from 'react-router-dom';\nimport { Button } from '@chakra-ui/react';\nimport css from './HomePage.module.css';\n\nexport default function HomePage() {\n  return (\n    <div className={css.wrapper}>\n      <h1>Phonebook</h1>\n      <p className={css.text}>Working with contacts is easy</p>\n      <Button colorScheme=\"telegram\" variant=\"ghost\" size=\"lg\">\n        <NavLink to=\"/contacts\">Let's start</NavLink>\n      </Button>\n    </div>\n  );\n}\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { ThemingProps } from \"@chakra-ui/system\"\n\nexport interface ButtonGroupContext extends ThemingProps<\"Button\"> {\n  /**\n   * @default false\n   */\n  isDisabled?: boolean\n}\n\nexport const [ButtonGroupProvider, useButtonGroup] =\n  createContext<ButtonGroupContext>({\n    strict: false,\n    name: \"ButtonGroupContext\",\n  })\n","import { chakra, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { cloneElement, isValidElement } from \"react\"\n\nexport function ButtonIcon(props: HTMLChakraProps<\"span\">) {\n  const { children, className, ...rest } = props\n\n  const _children = isValidElement(children)\n    ? cloneElement<any>(children, {\n        \"aria-hidden\": true,\n        focusable: false,\n      })\n    : children\n\n  const _className = cx(\"chakra-button__icon\", className)\n\n  return (\n    <chakra.span\n      display=\"inline-flex\"\n      alignSelf=\"center\"\n      flexShrink={0}\n      {...rest}\n      className={_className}\n    >\n      {_children}\n    </chakra.span>\n  )\n}\n\nButtonIcon.displayName = \"ButtonIcon\"\n","import { Spinner } from \"@chakra-ui/spinner\"\nimport { chakra, HTMLChakraProps, SystemStyleObject } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useMemo } from \"react\"\nimport { ButtonSpinnerOptions } from \"./button-types\"\n\ninterface ButtonSpinnerProps\n  extends HTMLChakraProps<\"div\">,\n    ButtonSpinnerOptions {}\n\nexport function ButtonSpinner(props: ButtonSpinnerProps) {\n  const {\n    label,\n    placement,\n    spacing = \"0.5rem\",\n    children = <Spinner color=\"currentColor\" width=\"1em\" height=\"1em\" />,\n    className,\n    __css,\n    ...rest\n  } = props\n\n  const _className = cx(\"chakra-button__spinner\", className)\n\n  const marginProp = placement === \"start\" ? \"marginEnd\" : \"marginStart\"\n\n  const spinnerStyles: SystemStyleObject = useMemo(\n    () => ({\n      display: \"flex\",\n      alignItems: \"center\",\n      position: label ? \"relative\" : \"absolute\",\n      [marginProp]: label ? spacing : 0,\n      fontSize: \"1em\",\n      lineHeight: \"normal\",\n      ...__css,\n    }),\n    [__css, label, marginProp, spacing],\n  )\n\n  return (\n    <chakra.div className={_className} {...rest} __css={spinnerStyles}>\n      {children}\n    </chakra.div>\n  )\n}\nButtonSpinner.displayName = \"ButtonSpinner\"\n","import { useMemo } from \"react\"\n\nexport type ReactRef<T> = React.RefCallback<T> | React.MutableRefObject<T>\n\nexport function assignRef<T = any>(\n  ref: ReactRef<T> | null | undefined,\n  value: T,\n) {\n  if (ref == null) return\n\n  if (typeof ref === \"function\") {\n    ref(value)\n    return\n  }\n\n  try {\n    ref.current = value\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`)\n  }\n}\n\nexport function mergeRefs<T>(...refs: (ReactRef<T> | null | undefined)[]) {\n  return (node: T | null) => {\n    refs.forEach((ref) => {\n      assignRef(ref, node)\n    })\n  }\n}\n\nexport function useMergeRefs<T>(...refs: (ReactRef<T> | null | undefined)[]) {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useMemo(() => mergeRefs(...refs), refs)\n}\n","import { useMergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\n\nimport { useMemo } from \"react\"\nimport { useButtonGroup } from \"./button-context\"\nimport { ButtonIcon } from \"./button-icon\"\nimport { ButtonSpinner } from \"./button-spinner\"\nimport { ButtonOptions } from \"./button-types\"\nimport { useButtonType } from \"./use-button-type\"\n\nexport interface ButtonProps\n  extends HTMLChakraProps<\"button\">,\n    ButtonOptions,\n    ThemingProps<\"Button\"> {}\n\n/**\n * Button component is used to trigger an action or event, such as submitting a form, opening a Dialog, canceling an action, or performing a delete operation.\n *\n * @see Docs https://chakra-ui.com/docs/components/button\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/button/\n */\nexport const Button = forwardRef<ButtonProps, \"button\">((props, ref) => {\n  const group = useButtonGroup()\n  const styles = useStyleConfig(\"Button\", { ...group, ...props })\n\n  const {\n    isDisabled = group?.isDisabled,\n    isLoading,\n    isActive,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type,\n    spinner,\n    spinnerPlacement = \"start\",\n    className,\n    as,\n    ...rest\n  } = omitThemingProps(props)\n\n  /**\n   * When button is used within ButtonGroup (i.e. flushed with sibling buttons),\n   * it is important to add a `zIndex` on focus.\n   *\n   * So let's read the component styles and then add `zIndex` to it.\n   */\n  const buttonStyles: SystemStyleObject = useMemo(() => {\n    // @ts-ignore\n    const _focus = { ...styles?.[\"_focus\"], zIndex: 1 }\n    return {\n      display: \"inline-flex\",\n      appearance: \"none\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      userSelect: \"none\",\n      position: \"relative\",\n      whiteSpace: \"nowrap\",\n      verticalAlign: \"middle\",\n      outline: \"none\",\n      ...styles,\n      ...(!!group && { _focus }),\n    }\n  }, [styles, group])\n\n  const { ref: _ref, type: defaultType } = useButtonType(as)\n\n  const contentProps = { rightIcon, leftIcon, iconSpacing, children }\n\n  return (\n    <chakra.button\n      ref={useMergeRefs(ref, _ref)}\n      as={as}\n      type={type ?? defaultType}\n      data-active={dataAttr(isActive)}\n      data-loading={dataAttr(isLoading)}\n      __css={buttonStyles}\n      className={cx(\"chakra-button\", className)}\n      {...rest}\n      disabled={isDisabled || isLoading}\n    >\n      {isLoading && spinnerPlacement === \"start\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--start\"\n          label={loadingText}\n          placement=\"start\"\n          spacing={iconSpacing}\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n\n      {isLoading ? (\n        loadingText || (\n          <chakra.span opacity={0}>\n            <ButtonContent {...contentProps} />\n          </chakra.span>\n        )\n      ) : (\n        <ButtonContent {...contentProps} />\n      )}\n\n      {isLoading && spinnerPlacement === \"end\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--end\"\n          label={loadingText}\n          placement=\"end\"\n          spacing={iconSpacing}\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n    </chakra.button>\n  )\n})\n\nButton.displayName = \"Button\"\n\ntype ButtonContentProps = Pick<\n  ButtonProps,\n  \"leftIcon\" | \"rightIcon\" | \"children\" | \"iconSpacing\"\n>\n\nfunction ButtonContent(props: ButtonContentProps) {\n  const { leftIcon, rightIcon, children, iconSpacing } = props\n  return (\n    <>\n      {leftIcon && <ButtonIcon marginEnd={iconSpacing}>{leftIcon}</ButtonIcon>}\n      {children}\n      {rightIcon && (\n        <ButtonIcon marginStart={iconSpacing}>{rightIcon}</ButtonIcon>\n      )}\n    </>\n  )\n}\n","import { useCallback, useState } from \"react\"\n\nexport function useButtonType(value?: React.ElementType) {\n  const [isButton, setIsButton] = useState(!value)\n  const refCallback = useCallback((node: HTMLElement | null) => {\n    if (!node) return\n    setIsButton(node.tagName === \"BUTTON\")\n  }, [])\n  const type = isButton ? \"button\" : undefined\n  return { ref: refCallback, type } as const\n}\n"],"names":["HomePage","className","css","colorScheme","variant","size","to","createContext","strict","name","useButtonGroup","props","children","rest","_children","focusable","isValidElement","cloneElement","_className","span","cx","ButtonIcon","chakra","alignSelf","flexShrink","displayName","label","placement","spacing","color","ButtonSpinner","Spinner","width","height","__css","marginProp","spinnerStyles","display","useMemo","alignItems","position","div","assignRef","ref","value","current","error","Error","mergeRefs","refs","node","forEach","useMergeRefs","styles","dataAttr","isDisabled","isLoading","isActive","Fragment","leftIcon","rightIcon","loadingText","iconSpacing","type","spinner","spinnerPlacement","as","buttonStyles","_focus","zIndex","appearance","justifyContent","userSelect","whiteSpace","verticalAlign","outline","useButtonType","_ref","defaultType","contentProps","useState","isButton","setIsButton","useCallback","tagName","button","disabled","useStyleConfig","Button","jsx","group","omitThemingProps","opacity","forwardRef","marginStart","marginEnd"],"sourceRoot":""}