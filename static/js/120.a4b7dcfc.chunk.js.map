{"version":3,"file":"static/js/120.a4b7dcfc.chunk.js","mappings":"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","sources":["redux/contacts/contactsSelectors.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","redux/filter/filterSelectors.js","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/ContactList/ContactListItem/ContactListItem.module.css?fe27","components/ContactList/ContactListItem/ContactListItem.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/EditForm/EditForm.module.css?d1fc","components/EditForm/EditForm.jsx","webpack://react-homework-template/./src/pages/ContactsPage/ContactsPage.module.css?0a45","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"button\":\"ContactForm_button__eSwX9\",\"errorText\":\"ContactForm_errorText__ueVpO\"};","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { object, string } from 'yup';\nimport { selectContacts } from 'redux/contacts/contactsSelectors';\nimport { addContact } from 'redux/contacts/contactsOperations';\nimport { Button, useToast } from '@chakra-ui/react';\nimport css from './ContactForm.module.css';\n\nconst FormError = ({ name }) => {\n  return (\n    <ErrorMessage\n      name={name}\n      render={message => <p className={css.errorText}>{message}</p>}\n    />\n  );\n};\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const [isLoading, setIsLoading] = useState(false);\n  const toast = useToast();\n\n  const { form, label, input } = css;\n\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n\n  const userSchema = object({\n    name: string().required(),\n    number: string().required(),\n  });\n\n  const handleSubmit = async (values, { resetForm }) => {\n    const duplicate = contacts.some(\n      ({ name }) => name.toLowerCase() === values.name.toLowerCase()\n    );\n    if (duplicate) {\n      return alert(`${values.name} is already in contacts`);\n    }\n    setIsLoading(true);\n    await dispatch(addContact(values));\n    setIsLoading(false);\n    toast({\n      title: 'Contact added.',\n      description: `${values.name} is in your Contacts now`,\n      status: 'success',\n      duration: 5000,\n      isClosable: true,\n    });\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={userSchema}\n      onSubmit={handleSubmit}\n    >\n      <Form className={form}>\n        <label className={label}>\n          Name\n          <Field className={input} type=\"text\" name=\"name\" />\n          <FormError name=\"name\" />\n        </label>\n        <label className={label}>\n          Number\n          <Field className={input} type=\"tel\" name=\"number\" />\n          <FormError name=\"number\" />\n        </label>\n        <Button\n          isLoading={isLoading}\n          loadingText=\"Submitting\"\n          colorScheme=\"telegram\"\n          variant=\"outline\"\n          type=\"submit\"\n        >\n          Submit\n        </Button>\n      </Form>\n    </Formik>\n  );\n};\n","export const selectFilter = state => state.filter;\n\nexport const selectValue = state => state.filter.filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"Filter_label__vEd1E\",\"input\":\"Filter_input__N7T3z\"};","import { changeFilterValue } from 'redux/filter/filterSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectValue } from 'redux/filter/filterSelectors';\nimport css from './Filter.module.css';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const value = useSelector(selectValue);\n  const { label, input } = css;\n\n  const onChange = e => {\n    const filter = e.currentTarget.value;\n    dispatch(changeFilterValue(filter));\n  };\n\n  return (\n    <label className={label}>\n      Find contacts by name\n      <input\n        className={input}\n        type=\"text\"\n        name=\"filter\"\n        value={value}\n        onChange={onChange}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n    </label>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ContactListItem_item__IXnKz\",\"wrapper\":\"ContactListItem_wrapper__HB+tC\",\"text\":\"ContactListItem_text__fHzb4\",\"number\":\"ContactListItem_number__vdoo4\"};","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contactsOperations';\nimport { Button, Icon, useToast } from '@chakra-ui/react';\nimport { ImBin2, ImPencil } from 'react-icons/im';\nimport css from './ContactListItem.module.css';\n\nexport const ContactListItem = ({ id, name, number, handleModal }) => {\n  const dispatch = useDispatch();\n  const [isLoading, setIsLoading] = useState(false);\n  const toast = useToast();\n  const { item, text, span } = css;\n\n  const handleIsModalOpen = () => {\n    handleModal(id);\n  };\n\n  const deleteHandle = async () => {\n    setIsLoading(true);\n    await dispatch(deleteContact(id));\n    setIsLoading(false);\n\n    toast({\n      title: 'Contact deleted.',\n      description: `${name} is removed from your Contacts`,\n      status: 'success',\n      duration: 5000,\n      isClosable: true,\n    });\n  };\n\n  return (\n    <li id={id} className={item}>\n      <div className={css.wrapper}>\n        <p className={text}>{name}</p>\n        <p className={span}>{number}</p>\n      </div>\n      <div>\n        <Button\n          onClick={handleIsModalOpen}\n          type=\"submit\"\n          colorScheme=\"telegram\"\n          variant=\"ghost\"\n          size=\"sm\"\n        >\n          <Icon as={ImPencil} boxSize={4} />\n        </Button>\n        <Button\n          onClick={deleteHandle}\n          isLoading={isLoading}\n          type=\"submit\"\n          colorScheme=\"telegram\"\n          variant=\"ghost\"\n        >\n          <Icon as={ImBin2} boxSize={4} />\n        </Button>\n      </div>\n    </li>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\"};","import { useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/contactsSelectors';\nimport { selectFilter } from 'redux/filter/filterSelectors';\nimport { ContactListItem } from './ContactListItem/ContactListItem';\nimport css from './ContactList.module.css';\n\nexport const ContactList = ({ handleModal }) => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const visibleContacts = () => {\n    if (contacts) {\n      return contacts.filter(({ name }) =>\n        name\n          .split(' ')\n          .join('')\n          .toLocaleLowerCase()\n          .includes(filter.toLocaleLowerCase())\n      );\n    }\n  };\n\n  return (\n    <ul className={css.list}>\n      {visibleContacts().map(({ id, name, number }) => {\n        return (\n          <ContactListItem\n            name={name}\n            number={number}\n            key={id}\n            id={id}\n            handleModal={handleModal}\n          />\n        );\n      })}\n    </ul>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"fixedOverlay\":\"EditForm_fixedOverlay__n9J1M\",\"modal\":\"EditForm_modal__vV9A7\",\"modalContainer\":\"EditForm_modalContainer__kApBD\",\"form\":\"EditForm_form__AqHH5\",\"text\":\"EditForm_text__RUnYO\",\"icon\":\"EditForm_icon__XErV6\",\"input\":\"EditForm_input__-9yye\",\"closeButton\":\"EditForm_closeButton__IAIAe\"};","import { Icon } from '@chakra-ui/react';\nimport { ImCross, ImUser, ImPhone } from 'react-icons/im';\nimport { Button } from '@chakra-ui/react';\nimport { useEffect, useState } from 'react';\nimport { selectContacts } from 'redux/contacts/contactsSelectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateContact } from 'redux/contacts/contactsOperations';\nimport css from './EditForm.module.css';\n\nexport const EditForm = ({ handleModal, contactId }) => {\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(selectContacts);\n\n  useEffect(() => {\n    const foundContact = contacts.find(contact => contact.id === contactId);\n\n    setName(foundContact.name);\n    setNumber(foundContact.number);\n\n    const handleEscapeKey = e => {\n      if (e.key === 'Escape') {\n        handleModal();\n      }\n    };\n\n    document.addEventListener('keydown', handleEscapeKey);\n\n    return () => {\n      document.removeEventListener('keydown', handleEscapeKey);\n    };\n  }, [contacts, contactId, handleModal]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const foundContact = contacts.find(contact => contact.id === contactId);\n    const filterContacts = contacts.filter(contact => contact.id !== contactId);\n    const sameNameContact = filterContacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (foundContact.name === name && foundContact.number === number) {\n      handleModal();\n      return;\n    }\n    if (sameNameContact) {\n      return alert(`${sameNameContact.name} is already in Contacts`);\n    }\n    dispatch(updateContact({ contactId, name, number }));\n    handleModal();\n  };\n\n  const handleOverlayClick = e => {\n    const overlayDiv = document.querySelector(`.${css.fixedOverlay}`);\n\n    if (e.target === overlayDiv) {\n      handleModal();\n    }\n  };\n\n  const handleButtonClick = () => {\n    handleModal();\n  };\n\n  const handleInputChange = e => {\n    switch (e.currentTarget.name) {\n      case 'name':\n        setName(e.target.value);\n        break;\n      case 'number':\n        setNumber(e.target.value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <div className={css.fixedOverlay} onClick={handleOverlayClick}>\n      <div className={css.modal}>\n        <div className={css.modalContainer}>\n          <form className={css.form} onSubmit={handleSubmit} autoComplete=\"off\">\n            <label className={css.text}>\n              <Icon className={css.icon} as={ImUser} color=\"blue\" boxSize={4} />\n              Name\n              <input\n                className={css.input}\n                type=\"text\"\n                name=\"name\"\n                value={name}\n                onChange={handleInputChange}\n              />\n            </label>\n            <label className={css.text}>\n              <Icon\n                className={css.icon}\n                as={ImPhone}\n                color=\"blue\"\n                boxSize={4}\n              />\n              Number\n              <input\n                className={css.input}\n                type=\"tel\"\n                name=\"number\"\n                value={number}\n                onChange={handleInputChange}\n              />\n            </label>\n            <Button\n              type=\"submit\"\n              colorScheme=\"telegram\"\n              variant=\"ghost\"\n              size=\"md\"\n            >\n              Save\n            </Button>\n            <button\n              className={css.closeButton}\n              type=\"button\"\n              onClick={handleButtonClick}\n            >\n              <Icon as={ImCross} color=\"blue\" boxSize={4} />\n            </button>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ContactsPage_wrapper__HYOyv\",\"spinner\":\"ContactsPage_spinner__hHFBB\"};","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { EditForm } from 'components/EditForm/EditForm';\nimport { Spinner } from '@chakra-ui/react';\nimport { selectIsLoading } from 'redux/contacts/contactsSelectors';\nimport css from './ContactsPage.module.css';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [contactId, setContactId] = useState('');\n  const isLoading = useSelector(selectIsLoading);\n\n  const handleToggleModal = contactId => {\n    setIsModalOpen(!isModalOpen);\n    if (!isModalOpen) {\n      console.log(contactId);\n      setContactId(contactId);\n    }\n  };\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div className={css.wrapper}>\n      <ContactForm />\n      <Filter />\n      {isLoading ? (\n        <Spinner\n          thickness=\"4px\"\n          speed=\"0.65s\"\n          emptyColor=\"gray.200\"\n          color=\"blue.500\"\n          size=\"xl\"\n          className={css.spinner}\n        />\n      ) : (\n        <ContactList handleModal={handleToggleModal} />\n      )}\n\n      {isModalOpen && (\n        <EditForm handleModal={handleToggleModal} contactId={contactId} />\n      )}\n    </div>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","FormError","name","render","message","className","css","ContactForm","dispatch","useDispatch","useSelector","useState","setIsLoading","toast","useToast","form","label","input","userSchema","object","string","required","number","handleSubmit","values","resetForm","some","toLowerCase","alert","addContact","title","description","status","duration","isClosable","initialValues","validationSchema","onSubmit","type","loadingText","colorScheme","variant","selectFilter","filter","selectValue","Filter","value","onChange","e","currentTarget","changeFilterValue","pattern","ContactListItem","id","handleModal","item","text","span","deleteHandle","deleteContact","onClick","size","as","ImPencil","boxSize","ImBin2","ContactList","split","join","toLocaleLowerCase","includes","visibleContacts","map","EditForm","contactId","setName","setNumber","useEffect","foundContact","find","contact","handleEscapeKey","key","document","addEventListener","removeEventListener","handleInputChange","target","overlayDiv","querySelector","preventDefault","sameNameContact","updateContact","autoComplete","ImUser","color","ImPhone","ImCross","ContactsPage","isModalOpen","setIsModalOpen","setContactId","handleToggleModal","console","log","fetchContacts","thickness","speed","emptyColor"],"sourceRoot":""}